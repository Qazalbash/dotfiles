{
    "ref": "a950f835-c60e-45e6-9857-fe61c3b4895b",
    "syncData": {
        "version": 1,
        "machineId": "241f47d1-77e8-4f59-ad2c-83f89fa82737",
        "content": "{\"c.json\":\"{\\n    \\\"opencl headers and macros\\\": {\\n        \\\"prefix\\\": \\\"opencl_headers\\\",\\n        \\\"body\\\": [\\n            \\\"#define CL_USE_DEPRECATED_OPENCL_1_2_APIS\\\",\\n            \\\"#define CL_TARGET_OPENCL_VERSION 300\\\",\\n            \\\"#define MAX_SOURCE_SIZE (0x100000)\\\\n\\\",\\n            \\\"#include <stdio.h>\\\",\\n            \\\"#include <CL/cl.h>\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL headers and macros\\\"\\n    },\\n\\n    \\\"device id\\\": {\\n        \\\"prefix\\\": \\\"get_device_id\\\",\\n        \\\"body\\\": [\\n            \\\"cl_device_id device_id;\\\\n\\\",\\n            \\\"$1 = clGetDeviceIDs(NULL, CL_DEVICE_TYPE_GPU, 1, &device_id, NULL);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not get device.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL device id\\\"\\n    },\\n\\n    \\\"context\\\": {\\n        \\\"prefix\\\": \\\"create_context\\\",\\n        \\\"body\\\": [\\n            \\\"cl_context context = clCreateContext(NULL, 1, &device_id, NULL, NULL, &$1);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not create context.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL context\\\"\\n    },\\n\\n    \\\"command queue\\\": {\\n        \\\"prefix\\\": \\\"create_command_queue\\\",\\n        \\\"body\\\": [\\n            \\\"cl_command_queue queue = clCreateCommandQueue(context, device_id, 0, &$1);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not create command queue.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL command queue\\\"\\n    },\\n\\n    \\\"read kernel file\\\": {\\n        \\\"prefix\\\": \\\"read_kernel_file\\\",\\n        \\\"body\\\": [\\n            \\\"FILE* fp = fopen(\\\\\\\"$1\\\\\\\", \\\\\\\"r\\\\\\\");\\\",\\n            \\\"fseek(fp, 0, SEEK_END);\\\",\\n            \\\"size_t size = ftell(fp);\\\\n\\\",\\n            \\\"if (size == 0) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. kernel file has no function.\\\\\\\", $2);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\\n\\\",\\n            \\\"fseek(fp, 0, SEEK_SET);\\\",\\n            \\\"char* source = (char*)malloc(size);\\\",\\n            \\\"fread(source, 1, size, fp);\\\",\\n            \\\"fclose(fp);\\\"\\n        ],\\n        \\\"description\\\": \\\"Read kernel file\\\"\\n    },\\n\\n    \\\"create program\\\": {\\n        \\\"prefix\\\": \\\"create_program\\\",\\n        \\\"body\\\": [\\n            \\\"cl_program program = clCreateProgramWithSource(\\\",\\n            \\\"\\\\tcontext, 1, (const char**)&source, &size, &$1);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not create program.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL program\\\"\\n    },\\n\\n    \\\"build program\\\": {\\n        \\\"prefix\\\": \\\"build_program\\\",\\n        \\\"body\\\": [\\n            \\\"$1 = clBuildProgram(program, 1, &device_id, NULL, NULL, NULL);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not build program.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL build program\\\"\\n    },\\n\\n    \\\"create kernel\\\": {\\n        \\\"prefix\\\": \\\"create_kernel\\\",\\n        \\\"body\\\": [\\n            \\\"cl_kernel kernel = clCreateKernel(program, \\\\\\\"$1\\\\\\\", &$2);\\\\n\\\",\\n            \\\"if ($2 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not create kernel.\\\\\\\", $2);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL kernel\\\"\\n    },\\n\\n    \\\"set kernel arguments\\\": {\\n        \\\"prefix\\\": \\\"set_kernel_args\\\",\\n        \\\"body\\\": [\\n            \\\"$1 = clSetKernelArg(kernel, $2, sizeof($3), (void*)&$3);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not set kernel arguments.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL set kernel arguments\\\"\\n    },\\n\\n    \\\"enqueue kernel\\\": {\\n        \\\"prefix\\\": \\\"enqueue_kernel\\\",\\n        \\\"body\\\": [\\n            \\\"$1 = clEnqueueNDRangeKernel(queue, kernel, $2, NULL, $3, $4, 0, NULL, NULL);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not enqueue kernel.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL enqueue kernel\\\"\\n    },\\n\\n    \\\"create buffer\\\": {\\n        \\\"prefix\\\": \\\"create_buffer\\\",\\n        \\\"body\\\": [\\n            \\\"cl_mem $1 = clCreateBuffer(context, CL_MEM_READ_WRITE | CL_MEM_WRITE_ONLY | CL_MEM_READ_ONLY, sizeof($2), NULL, &$3);\\\\n\\\",\\n            \\\"if ($3 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not create buffer.\\\\\\\", $3);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL create buffer\\\"\\n    },\\n\\n    \\\"read buffer\\\": {\\n        \\\"prefix\\\": \\\"read_buffer\\\",\\n        \\\"body\\\": [\\n            \\\"$1 = clEnqueueReadBuffer(queue, $2, CL_TRUE, 0, sizeof($3), $3, 0, NULL, NULL);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not read buffer.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL read buffer\\\"\\n    },\\n\\n    \\\"write buffer\\\": {\\n        \\\"prefix\\\": \\\"write_buffer\\\",\\n        \\\"body\\\": [\\n            \\\"$1 = clEnqueueWriteBuffer(queue, $2, CL_TRUE, 0, sizeof($3), $3, 0, NULL, NULL);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not write buffer.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL write buffer\\\"\\n    },\\n\\n    \\\"finish queue\\\": {\\n        \\\"prefix\\\": \\\"finish_queue\\\",\\n        \\\"body\\\": [\\n            \\\"$1 = clFinish(queue);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not finish queue.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL finish queue\\\"\\n    },\\n\\n    \\\"release kernel\\\": {\\n        \\\"prefix\\\": \\\"release_kernel\\\",\\n        \\\"body\\\": [\\\"$1 = clReleaseKernel(kernel);\\\\n\\\"],\\n        \\\"description\\\": \\\"OpenCL release kernel\\\"\\n    },\\n\\n    \\\"release program\\\": {\\n        \\\"prefix\\\": \\\"release_program\\\",\\n        \\\"body\\\": [\\\"$1 = clReleaseProgram(program);\\\\n\\\"],\\n        \\\"description\\\": \\\"OpenCL release program\\\"\\n    },\\n\\n    \\\"release command queue\\\": {\\n        \\\"prefix\\\": \\\"release_command_queue\\\",\\n        \\\"body\\\": [\\n            \\\"$1 = clReleaseCommandQueue(queue);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not release command queue.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL release command queue\\\"\\n    },\\n\\n    \\\"release context\\\": {\\n        \\\"prefix\\\": \\\"release_context\\\",\\n        \\\"body\\\": [\\n            \\\"$1 = clReleaseContext(context);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not release context.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL release context\\\"\\n    },\\n\\n    \\\"release buffer\\\": {\\n        \\\"prefix\\\": \\\"release_buffer\\\",\\n        \\\"body\\\": [\\n            \\\"$1 = clReleaseMemObject($2);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not release buffer.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL release buffer\\\"\\n    },\\n\\n    \\\"release all\\\": {\\n        \\\"prefix\\\": \\\"release_all\\\",\\n        \\\"body\\\": [\\n            \\\"$1 = clReleaseKernel(kernel);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not release kernel.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\\n\\\",\\n            \\\"$1 = clReleaseProgram(program);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not release program.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\\n\\\",\\n            \\\"$1 = clReleaseCommandQueue(queue);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not release command queue.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\\n\\\",\\n            \\\"$1 = clReleaseContext(context);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not release context.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n}\\\\n\\\",\\n            \\\"$1 = clReleaseMemObject($2);\\\\n\\\",\\n            \\\"if ($1 != CL_SUCCESS) {\\\",\\n            \\\"\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not release buffer.\\\\\\\", $1);\\\",\\n            \\\"\\\\treturn -1;\\\\n\\\\n}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL release all\\\"\\n    },\\n\\n    \\\"Print to console\\\": {\\n        \\\"prefix\\\": \\\"opencl_template\\\",\\n        \\\"body\\\": [\\n            \\\"#define CL_USE_DEPRECATED_OPENCL_1_2_APIS\\\",\\n            \\\"#define CL_TARGET_OPENCL_VERSION 300\\\\n\\\",\\n            \\\"#include <CL/cl.h>\\\",\\n            \\\"#include <stdio.h>\\\\n\\\",\\n            \\\"int main(int argc, char** argv) {\\\",\\n            \\\"\\\\tconst char* kernel_file = \\\\\\\"$1\\\\\\\";\\\",\\n            \\\"\\\\tconst char* kernel_name = \\\\\\\"$2\\\\\\\";\\\\n\\\",\\n            \\\"\\\\tcl_uint work_dim = $3;\\\\n\\\",\\n            \\\"\\\\tconst size_t* global_work_size = (const size_t[]){$4};\\\",\\n            \\\"\\\\tconst size_t* local_work_size  = (const size_t[]){$5};\\\\n\\\",\\n            \\\"\\\\tcl_device_id device_id;\\\\n\\\",\\n            \\\"\\\\tcl_int err = clGetDeviceIDs(NULL, CL_DEVICE_TYPE_GPU, 1, &device_id, NULL);\\\\n\\\",\\n            \\\"\\\\tif (err != CL_SUCCESS) {\\\",\\n            \\\"\\\\t\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not get device.\\\\\\\", err);\\\",\\n            \\\"\\\\t\\\\treturn -1;\\\",\\n            \\\"\\\\t}\\\\n\\\",\\n            \\\"\\\\tcl_context context = clCreateContext(NULL, 1, &device_id, NULL, NULL, &err);\\\\n\\\",\\n            \\\"\\\\tif (err != CL_SUCCESS) {\\\",\\n            \\\"\\\\t\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not create context.\\\\\\\", err);\\\",\\n            \\\"\\\\t\\\\treturn -1;\\\",\\n            \\\"\\\\t}\\\\n\\\",\\n            \\\"\\\\tcl_command_queue queue = clCreateCommandQueue(context, device_id, 0, &err);\\\\n\\\",\\n            \\\"\\\\tif (err != CL_SUCCESS) {\\\",\\n            \\\"\\\\t\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not create command queue.\\\\\\\", err);\\\",\\n            \\\"\\\\t\\\\treturn -1;\\\",\\n            \\\"\\\\t}\\\\n\\\",\\n            \\\"\\\\tFILE* fp = fopen(kernel_file, \\\\\\\"r\\\\\\\");\\\",\\n            \\\"\\\\tfseek(fp, 0, SEEK_END);\\\",\\n            \\\"\\\\tsize_t size = ftell(fp);\\\\n\\\",\\n            \\\"\\\\tif (size == 0) {\\\",\\n            \\\"\\\\t\\\\tprintf(\\\\\\\"Error: %d. kernel file has no function.\\\\\\\", err);\\\",\\n            \\\"\\\\t\\\\treturn -1;\\\",\\n            \\\"\\\\t}\\\\n\\\",\\n            \\\"\\\\tfseek(fp, 0, SEEK_SET);\\\",\\n            \\\"\\\\tchar* source = (char*)malloc(size);\\\",\\n            \\\"\\\\tfread(source, 1, size, fp);\\\",\\n            \\\"\\\\tfclose(fp);\\\\n\\\",\\n            \\\"\\\\tcl_program program = clCreateProgramWithSource(\\\",\\n            \\\"\\\\t\\\\tcontext, 1, (const char**)&source, &size, &err);\\\\n\\\",\\n            \\\"\\\\tif (err != CL_SUCCESS) {\\\",\\n            \\\"\\\\t\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not create program.\\\\\\\", err);\\\",\\n            \\\"\\\\t\\\\treturn -1;\\\",\\n            \\\"\\\\t}\\\\n\\\",\\n            \\\"\\\\terr = clBuildProgram(program, 1, &device_id, NULL, NULL, NULL);\\\\n\\\",\\n            \\\"\\\\tif (err != CL_SUCCESS) {\\\",\\n            \\\"\\\\t\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not build program.\\\\\\\", err);\\\",\\n            \\\"\\\\t\\\\treturn -1;\\\",\\n            \\\"\\\\t}\\\\n\\\",\\n            \\\"\\\\tcl_kernel kernel = clCreateKernel(program, kernel_name, &err);\\\\n\\\",\\n            \\\"\\\\tif (err != CL_SUCCESS) {\\\",\\n            \\\"\\\\t\\\\tprintf(\\\\\\\"Error: %d. OpenCL could not create kernel.\\\\\\\", err);\\\",\\n            \\\"\\\\t\\\\treturn -1;\\\",\\n            \\\"\\\\t}\\\\n\\\",\\n            \\\"\\\\tclEnqueueNDRangeKernel(queue, kernel, work_dim, NULL, global_work_size,\\\",\\n            \\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t   local_work_size, 0, NULL, NULL);\\\\n\\\",\\n            \\\"\\\\tclFinish(queue);\\\\n\\\",\\n            \\\"\\\\tclReleaseKernel(kernel);\\\",\\n            \\\"\\\\tclReleaseProgram(program);\\\",\\n            \\\"\\\\tclReleaseCommandQueue(queue);\\\",\\n            \\\"\\\\tclReleaseContext(context);\\\\n\\\",\\n            \\\"\\\\tfree(source);\\\",\\n            \\\"\\\\tfree(kernel_name);\\\",\\n            \\\"\\\\tfree(kernel_file);\\\\n\\\",\\n            \\\"\\\\treturn 0;\\\",\\n            \\\"}\\\"\\n        ],\\n        \\\"description\\\": \\\"OpenCL template for convinience\\\"\\n    }\\n}\\n\"}"
    }
}
